from time import ctime

from pyrogram import filters
from pyrogram.types import (InlineQuery, InlineQueryResultArticle,
                            InputTextMessageContent, Message)

from spr import SUDOERS, spr
from spr.utils.db import (add_chat, add_user, chat_exists,
                          get_blacklist_event, get_nsfw_count,
                          get_reputation, get_user_trust,
                          is_chat_blacklisted, is_user_blacklisted,
                          user_exists)

__MODULE__ = "üí• ùêàùêßùêüùê® üíê"
__HELP__ = """
**…¢·¥á·¥õ …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä ·¥Ñ ú·¥Ä·¥õ ·¥è Ä ·¥ús·¥á Ä**

/info [CHAT_ID/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á|USER_ID/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á]

·¥è Ä  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á …™…¥ ü…™…¥·¥á ·¥ç·¥è·¥Ö·¥á >>
@SpamProtection_Robot [CHAT_ID/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á|USER_ID/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á]
"""


async def get_user_info(user):
    try:
        user = await spr.get_users(user)
    except Exception:
        return
    if not user_exists(user.id):
        add_user(user.id)
    trust = get_user_trust(user.id)
    blacklisted = is_user_blacklisted(user.id)
    reason = None
    if blacklisted:
        reason, time = get_blacklist_event(user.id)
    data = f"""
**…™·¥Ö:** {user.id}
**·¥Ö·¥Ñ:** {user.dc_id}
**·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:** {user.username}
**·¥ç·¥á…¥·¥õ…™·¥è…¥: ** {user.mention("Link")}

**…™s s·¥ú·¥Ö·¥è:** {user.id in SUDOERS}
**·¥õ Ä·¥ús·¥õ:** {trust}
**s·¥ò·¥Ä·¥ç·¥ç·¥á Ä:** {True if trust < 50 else False}
** Ä·¥á·¥ò·¥ú·¥õ·¥Ä·¥õ…™·¥è…¥:** {get_reputation(user.id)}
**…¥s“ì·¥° ·¥Ñ·¥è·¥ú…¥·¥õ:** {get_nsfw_count(user.id)}
**·¥ò·¥è·¥õ·¥á…¥·¥õ…™·¥Ä ü s·¥ò·¥Ä·¥ç·¥ç·¥á Ä:** {True if trust < 70 else False}
** ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö:** {blacklisted}
"""
    data += (
        f"** ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ  Ä·¥á·¥Äs·¥è…¥:** {reason} | {ctime(time)}"
        if reason
        else ""
    )
    return data


async def get_chat_info(chat):
    try:
        chat = await spr.get_chat(chat)
    except Exception:
        return
    if not chat_exists(chat.id):
        add_chat(chat.id)
    blacklisted = is_chat_blacklisted(chat.id)
    reason = None
    if blacklisted:
        reason, time = get_blacklist_event(chat.id)
    data = f"""
**…™·¥Ö:** {chat.id}
**·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:** {chat.username}
**·¥õ è·¥ò·¥á:** {chat.type}
**·¥ç·¥á·¥ç ô·¥á Äs:** {chat.members_count}
**s·¥Ñ·¥Ä·¥ç:** {chat.is_scam}
** Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö:** {chat.is_restricted}
** ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö:** {blacklisted}
"""
    data += (
        f"** ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ  Ä·¥á·¥Äs·¥è…¥:** {reason} | {ctime(time)}"
        if reason
        else ""
    )
    return data


async def get_info(entity):
    user = await get_user_info(entity)
    if user:
        return user
    chat = await get_chat_info(entity)
    return chat


@spr.on_message(filters.command("info"), group=3)
async def info_func(_, message: Message):
    if message.reply_to_message:
        reply = message.reply_to_message
        user = reply.from_user
        entity = user.id or message.chat.id
    elif len(message.command) == 1:
        user = message.from_user
        entity = user.id or message.chat.id
    elif len(message.command) == 2:
        entity = message.text.split(None, 1)[1]
    else:
        return await message.reply_text(" Ä·¥á·¥Ä·¥Ö ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú...")
    entity = await get_info(entity)
    entity = entity or "…™  ú·¥Ä·¥†·¥á…¥'·¥õ s·¥á·¥á…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ/·¥ús·¥á Ä..."
    await message.reply_text(entity)


@spr.on_inline_query()
async def inline_info_func(_, query: InlineQuery):
    query_ = query.query.strip()
    entity = await get_info(query_)
    if not entity:
        err = "I  ú·¥Ä·¥†·¥á…¥'·¥õ s·¥á·¥á…¥ ·¥õ ú…™s ·¥ús·¥á Ä/·¥Ñ ú·¥Ä·¥õ..."
        results = [
            InlineQueryResultArticle(
                err,
                input_message_content=InputTextMessageContent(err),
            )
        ]
    else:
        results = [
            InlineQueryResultArticle(
                "“ì·¥è·¥ú…¥·¥Ö ·¥á…¥·¥õ…™·¥õ è...",
                input_message_content=InputTextMessageContent(entity),
            )
        ]
    await query.answer(results=results, cache_time=3)
